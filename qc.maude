load cpx.maude

fmod DIRAC is
    sorts BNat Ket Bra .

    ops 0 1 : -> BNat [ctor] .
    --- basis vectors
    op |_> : BNat -> Ket [ctor] .
    op <_| : BNat -> Bra [ctor] .
    
    --- abbreviations for basis vectors
    ops |0> |1> : -> Ket .
    ops <0| <1| : -> Bra .
    eq |0> = | 0 > .
    eq |1> = | 1 > .
    eq <0| = < 0 | .
    eq <1| = < 1 | .
endfm

fmod MAT is
    pr CPX .
    pr DIRAC .

    sorts ZeroV Vect ZeroD Dual ZeroM Mat .
    subsorts ZeroV Ket < Vect .
    subsorts ZeroM < Mat .
    subsorts ZeroD Bra < Dual .

    --- zero vector, dual and matrix
    op O   : -> ZeroV [ctor] .
    op O^+ : -> ZeroD [ctor] .
    op mO  : -> ZeroM [ctor] .
    --- basic matrices
    ops |_><_| : BNat BNat -> Mat [ctor] .
    --- abbreviations for basic matrices
    ops |0><0| |0><1| |1><0| |1><1| : -> Mat .
    eq |0><0| = | 0 >< 0 | .
    eq |0><1| = | 0 >< 1 | .
    eq |1><0| = | 1 >< 0 | .
    eq |1><1| = | 1 >< 1 | .
    --- identity matrix
    op I : -> Mat [ctor] .
    --- scalar multiplication with matrix
    op _._ : Cpx Vect -> Vect [prec 31] .
    op _._ : Cpx Dual -> Dual [prec 31] .
    op _._ : Cpx Mat -> Mat [prec 31] .
    --- matrix addition
    op _+_ : Vect Vect -> Vect [comm assoc prec 33] .
    op _+_ : Dual Dual -> Dual [comm assoc prec 33] .
    op _+_ : Mat Mat -> Mat [comm assoc prec 33] .
    --- matrix product
    op _x_ : Mat Vect -> Vect [prec 31] .
    op _x_ : Vect Dual -> Mat [prec 31] .
    op _x_ : Mat Mat -> Mat [assoc prec 31] .
    --- tensor product
    op _(x)_ : Vect Vect -> Vect [assoc prec 31] .
    op _(x)_ : Dual Dual -> Dual [assoc prec 31] .
    op _(x)_ : Mat Mat -> Mat [assoc prec 31] .
    --- dagger
    op (_)^+ : Vect -> Dual [prec 30] .
    op (_)^+ : Dual -> Vect [prec 30] .
    op (_)^+ : Mat -> Mat [prec 30] .
    --- scalar product
    op SP(_,_) : Vect Vect -> Cpx .

    vars M M1 M2 M3 M4 : Mat .
    vars V V1 V2 V3 : Vect .
    vars D D1 D2 D3 : Dual .
    vars C C1 C2 : Cpx .
    vars K K1 K2 : Ket .
    vars B Bra : Bra .
    vars BN BN' BN1 BN2 BN3 BN4 : BNat .

    --- scalar product
    eq SP(V, O) = 0 .
    eq SP(O, V) = 0 .
    eq SP(K1, K2) = if K1 == K2 then 1 else 0 fi .
    --- eq SP(|0>, |0>) = 1 .
    --- eq SP(|0>, |1>) = 0 .
    --- eq SP(|1>, |0>) = 0 .
    --- eq SP(|1>, |1>) = 1 .
    eq SP(C1 . V1, V2) = (C1)^* .* SP(V1, V2) .
    eq SP(V1, C2 . V2) = C2 .* SP(V1, V2) .
    eq SP(V1 + V2, V3) = SP(V1, V3) .+ SP(V2, V3) .
    eq SP(V1, V2 + V3) = SP(V1, V2) .+ SP(V1, V3) .
    eq SP(K1 (x) V1, K2 (x) V2) = SP(K1, K2) .* SP(V1, V2) .
    eq (SP(V1, V2))^* = SP(V2, V1) .

    --- zero vector
    eq [scalar-O1] : 0 . V = O .
    eq [scalar-O2] : C . O = O .
    eq [add-O1] : O + V = V .
    eq [mul-O1] : M x O = O .
    eq [mul-O2] : mO x V = O .
    eq [tensor-O1] : V (x) O = O .
    eq [tensor-O2] : O (x) V = O .

    --- zero dual
    eq [d-scalar-O1] : 0 . D = O^+ .
    eq [d-scalar-O2] : C . O^+ = O^+ .
    eq [d-add-O1] : O^+ + D = D .
    eq [d-mul-O1] : V x O^+ = mO .
    eq [d-mul-O2] : O x D = mO .
    eq [d-tensor-O1] : D (x) O^+ = O^+ .
    eq [d-tensor-O2] : O^+ (x) D = O^+ .

    --- zero matrix
    eq [m-scalar-O1] : 0 . M = mO .
    eq [m-scalar-O2] : C . mO = mO .
    eq [m-add-O1] : M + mO = M .
    eq [m-mul-O1] : M x mO = mO .
    eq [m-mul-O2] : mO x M = mO .
    eq [m-tensor-O1] : mO (x) M = mO .
    eq [m-tensor-O2] : M (x) mO = mO .

    --- identity matrix properties
    eq [mul-I1] : I x M = M .
    eq [mul-I2] : M x I = M .

    --- dagger properties
    eq [dagger-V1] : (O)^+ = O^+ .
    eq [dagger-V2] : (|0>)^+ = <0| .
    eq [dagger-V3] : (|1>)^+ = <1| .
    eq [dagger-V4] : (C . V)^+ = ((C)^*) . (V)^+ .
    eq [dagger-V5] : (V1 + V2)^+ = (V1)^+ + (V2)^+ .
    eq [dagger-V6] : (V1 (x) V2)^+ = (V1)^+ (x) (V2)^+ .
    eq [dagger-V7] : ((V)^+)^+ = V .

    eq [dagger-D1] : (O^+)^+ = O .
    eq [dagger-D2] : (<0|)^+ = |0> .
    eq [dagger-D3] : (<1|)^+ = |1> .
    eq [dagger-D4] : (C . D)^+ = ((C)^*) . (D)^+ .
    eq [dagger-D5] : (D1 + D2)^+ = (D1)^+ + (D2)^+ .
    eq [dagger-D6] : (D1 (x) D2)^+ = (D1)^+ (x) (D2)^+ .
    eq [dagger-D7] : ((D)^+)^+ = D .
    
    eq [dagger-M1] : (mO)^+ = mO .
    eq [dagger-M2] : (I)^+ = I .
    eq [dagger-M3] : (| BN >< BN' |)^+ = | BN' >< BN | .
    --- eq [dagger-M3] : (|0><0|)^+ = |0><0| .
    --- eq [dagger-M3] : (|0><1|)^+ = |1><0| .
    --- eq [dagger-M3] : (|1><0|)^+ = |0><1| .
    --- eq [dagger-M3] : (|1><1|)^+ = |1><1| .
    eq [dagger-M4] : (C . M)^+ = ((C)^*) . (M)^+ .
    eq [dagger-M5] : (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq [dagger-M6] : (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq [dagger-M7] : (M1 (x) M2)^+ = (M1)^+ (x) (M2)^+ .
    eq [dagger-M8] : ((M)^+)^+ = M .

    --- multiplication distributes over addition
    eq [dist-mul-V1] : M x (V1 + V2) = M x V1 + M x V2 .
    eq [dist-mul-V2] : (M1 + M2) x V = M1 x V + M2 x V .
    
    eq [dist-mul-D1] : V x (D1 + D2) = V x D1 + V x D2 .
    eq [dist-mul-D2] : (V1 + V2) x D = V1 x D + V2 x D .

    eq [dist-mul-M1] : M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq [dist-mul-M2] : (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- scalar normal forms
    eq [scalar-V1] : 1 . V = V .
    eq [scalar-V2] : C1 . (C2 . V) = (C1 .* C2) . V .
    eq [scalar-V3] : C . (V1 + V2) = C . V1 + C . V2 .

    eq [scalar-D1] : 1 . D = D .
    eq [scalar-D2] : C1 . (C2 . D) = (C1 .* C2) . D .
    eq [scalar-D3] : C . (D1 + D2) = C . D1 + C . D2 .

    eq [scalar-M1] : 1 . M = M .
    eq [scalar-M2] : C1 . (C2 . M) = (C1 .* C2) . M .
    eq [scalar-M3] : C . (M1 + M2) = C . M1 + C . M2 .

    --- additive normal forms
    eq [add-V1] : V + V = 2 . V .
    eq [add-V2] : (C . V) + V = (C .+ 1) . V .
    eq [add-V3] : (C1 . V) + (C2 . V) = (C1 .+ C2) . V .
    
    eq [add-D1] : D + D = 2 . D .
    eq [add-D2] : (C . D) + D = (C .+ 1) . D .
    eq [add-D3] : (C1 . D) + (C2 . D) = (C1 .+ C2) . D .

    eq [add-M1] : M + M = 2 . M .
    eq [add-M2] : (C . M) + M = (C .+ 1) . M .
    eq [add-M3] : (C1 . M) + (C2 . M) = (C1 .+ C2) . M .
    
    --- multiplicative normal forms
    eq [mul-MV1] : (C . M) x V = C . (M x V) .
    eq [mul-MV2] : M x (C . V) = C . (M x V) .
    eq [mul-MV3] : (M1 (x) M2) x (V1 (x) V2) = (M1 x V1) (x) (M2 x V2) .
    eq [mul-MV4] : | BN1 >< BN2 | x | BN3 > = if BN2 == BN3 then | BN1 > else O fi .
    --- eq [mul-MV4] : |0><0| x |0> = |0> .
    --- eq [mul-MV4] : |0><0| x |1> = O .
    --- eq [mul-MV4] : |0><1| x |0> = O .
    --- eq [mul-MV4] : |0><1| x |1> = |0> .
    --- eq [mul-MV4] : |1><0| x |0> = |1> .
    --- eq [mul-MV4] : |1><0| x |1> = O .
    --- eq [mul-MV4] : |1><1| x |0> = O .
    --- eq [mul-MV4] : |1><1| x |1> = |1> .
    eq [mul-MV5] : I x | BN > = | BN > .
    eq [mul-MV6] : (M1 x M2) x V = M1 x (M2 x V) .

    eq [mul-VD1] : (C . V) x D = C . (V x D) .
    eq [mul-VD2] : V x (C . D) = C . (V x D) .
    eq [mul-VD3] : (K (x) V) x (B (x) D) = (K x B) (x) (V x D) .
    eq [mul-VD4] : | BN > x < BN' | = | BN >< BN' | .
    --- eq [mul-VD4] : |0> x <0| = |0><0| .
    --- eq [mul-VD4] : |0> x <1| = |0><1| .
    --- eq [mul-VD4] : |1> x <0| = |1><0| .
    --- eq [mul-VD4] : |1> x <1| = |1><1| .

    eq [mul-MM1] : (C . M1) x M2 = C . (M1 x M2) .
    eq [mul-MM2] : M1 x (C . M2) = C . (M1 x M2) .
    eq [mul-MM3] : | BN1 >< BN2 | x | BN3 >< BN4 | = if BN2 == BN3 then | BN1 >< BN4 | else mO fi .
    --- eq [mul-MM3] : |0><0| x |0><0| = |0><0| .
    --- eq [mul-MM3] : |0><0| x |0><1| = |0><1| .
    --- eq [mul-MM3] : |0><0| x |1><0| = mO .
    --- eq [mul-MM3] : |0><0| x |1><1| = mO .
    --- eq [mul-MM3] : |0><1| x |0><0| = mO .
    --- eq [mul-MM3] : |0><1| x |0><1| = mO .
    --- eq [mul-MM3] : |0><1| x |1><0| = |0><0| .
    --- eq [mul-MM3] : |0><1| x |1><1| = |0><1| .
    --- eq [mul-MM3] : |1><0| x |0><0| = |1><0| .
    --- eq [mul-MM3] : |1><0| x |0><1| = |1><1| .
    --- eq [mul-MM3] : |1><0| x |1><0| = mO .
    --- eq [mul-MM3] : |1><0| x |1><1| = mO .
    --- eq [mul-MM3] : |1><1| x |0><0| = mO .
    --- eq [mul-MM3] : |1><1| x |0><1| = mO .
    --- eq [mul-MM3] : |1><1| x |1><0| = |1><0| .
    --- eq [mul-MM3] : |1><1| x |1><1| = |1><1| .
    eq [mul-MM4] : (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    
    --- tensor product normal forms
    eq [tensor-V1] : (C . V1) (x) V2 = C . (V1 (x) V2) .
    eq [tensor-V2] : V1 (x) (C . V2) = C . (V1 (x) V2) .

    eq [tensor-D1] : (C . D1) (x) D2 = C . (D1 (x) D2) .
    eq [tensor-D2] : D1 (x) (C . D2) = C . (D1 (x) D2) .
    
    eq [tensor-M1] : (C . M1) (x) M2 = C . (M1 (x) M2) .
    eq [tensor-M2] : M1 (x) (C . M2) = C . (M1 (x) M2) .
    
    --- tensor distributes over addition
    eq [dist-tensor-V1] : V1 (x) (V2 + V3) = V1 (x) V2 + V1 (x) V3 .
    eq [dist-tensor-V2] : (V1 + V2) (x) V3 = V1 (x) V3 + V2 (x) V3 .

    eq [dist-tensor-D1] : D1 (x) (D2 + D3) = D1 (x) D2 + D1 (x) D3 .
    eq [dist-tensor-D2] : (D1 + D2) (x) D3 = D1 (x) D3 + D2 (x) D3 .

    eq [dist-tensor-M1] : M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq [dist-tensor-M2] : (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .
endfm

fmod QC is
    pr MAT .

    op I : Nat -> Mat .
    op size : Vect -> Nat [memo] .
    op size : Mat  -> Nat [memo] .
    op errNat : -> [Nat] [ctor] .

    vars N N1 N2 N3 : Nat .
    vars V V1 V2 : Vect .
    vars M M1 M2 : Mat .
    vars BN BN' : BNat .
    vars C : Cpx .
    vars P : Real .

    eq  [I1] : I x V = V .
    eq  [I2] : I(0) (x) M = M .
    eq  [I3] : M (x) I(0) = M .
    ceq [I4] : I(N) = I (x) I(N - 1) if N > 0 .

    eq  [size1.1]  : size(| BN >) = 1 .
    eq  [size1.2]  : size(C . V) = size(V) .
    ceq [size1.3]  : size(V1 + V2) = size(V1) if size(V1) == size(V2) .
    ceq [size1.3E] : size(V1 + V2) = errNat if size(V1) =/= size(V2) .
    ceq [size1.4]  : size(M x V) = size(V) if size(M) == size(V) .
    ceq [size1.4E] : size(M x V) = errNat if size(M) =/= size(V) .
    eq  [size1.5]  : size(V1 (x) V2) = size(V1) + size(V2) .

    eq  [size2.1]  : size(| BN >< BN' |) = 1 .
    eq  [size2.2]  : size(C . M) = size(M) .
    ceq [size2.3]  : size(M1 + M2) = size(M1) if size(M1) == size(M2) .
    ceq [size2.3E] : size(M1 + M2) = errNat if size(M1) =/= size(M2) .
    ceq [size2.4]  : size(M1 x M2) = size(M1) if size(M1) == size(M2) .
    ceq [size2.4E] : size(M1 x M2) = errNat if size(M1) =/= size(M2) .
    eq  [size2.5]  : size(M1 (x) M2) = size(M1) + size(M2) .

    --- quantum gates
    ops P0 P1 X Y Z H S T : Nat -> Mat .
    ops CX CY CZ SWAP : Nat Nat -> Mat .
    ops CCX CCZ CSWAP : Nat Nat Nat -> Mat .

    --- single-qubit gates
    eq [P0] : P0(N) x V = (I(N) (x) |0><0| (x) I(size(V) - (N + 1))) x V .
    eq [P1] : P1(N) x V = (I(N) (x) |1><1| (x) I(size(V) - (N + 1))) x V .
    eq [X]  : X(N) x V  = (I(N) (x) (|0><1| + |1><0|) (x) I(size(V) - (N + 1))) x V .
    eq [Y]  : Y(N) x V  = (I(N) (x) ((-1 i) . |0><1| + (1 i) . |1><0|) (x) I(size(V) - (N + 1))) x V .
    eq [Z]  : Z(N) x V  = (I(N) (x) (|0><0| + (-1) . |1><1|) (x) I(size(V) - (N + 1))) x V .
    eq [H]  : H(N) x V  = (1 ./ sqrt(2) . (X(N) + Z(N))) x V .
    eq [S]  : S(N) x V  = (P0(N) + ((1 i) . P1(N))) x V .
    eq [T]  : T(N) x V  = (P0(N) + (((1 .+ (1 i)) ./ sqrt(2)) . P1(N))) x V .

    --- two-qubit gates
    eq [CX]    : CX(N1, N2) x V   = (P0(N1) + (P1(N1) x X(N2))) x V .
    eq [CY]    : CY(N1, N2) x V   = (P0(N1) + (P1(N1) x Y(N2))) x V .
    eq [CZ]    : CZ(N1, N2) x V   = (P0(N1) + (P1(N1) x Z(N2))) x V .
    eq [SWAP]  : SWAP(N1, N2) x V = (CX(N1, N2) x CX(N2, N1) x CX(N1, N2)) x V .

    --- three-qubit gates
    eq [CCX]   : CCX(N1, N2, N3) x V   = (P0(N1) + (P1(N1) x CX(N2, N3))) x V .
    eq [CCZ]   : CCZ(N1, N2, N3) x V   = (P0(N1) + (P1(N1) x CZ(N2, N3))) x V .
    eq [CSWAP] : CSWAP(N1, N2, N3) x V = (P0(N1) + (P1(N1) x SWAP(N2,N3))) x V .
endfm